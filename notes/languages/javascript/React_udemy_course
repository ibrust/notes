
===========================================
REACT KEY CONCEPTS 
===========================================

React was released in 2013 

web development has a long history 
    there have been cross-browser compatibility issues from t he beginning (browser wars)

    jQuery is an old framework that allowed easy cross-browser interaction with the DOM 

    websites evolved into larger web-apps, and javascript files started getting larger / more numerous. 
        backbonejs came out, which helped to organize large numbers of javascript files 
    
    traditionally you just used HTML files for each page, and you'd request a new page each time you clicked a link 
        but AJAX was introduced, which combined with jQuery & backbone allowed for single-page architectures 
            single-page architectures are built more like a desktop application 
            instead of getting new documents from the server you have 1 document, 
                and the javascript (using AJAX and local data) would simply update the DOM & rerender the UI 
    
    single-page applications became very popular
        in 2010 angularJS (created by google) was the standard way of building single-page applications
        angularJS allowed people to easily use MVC patterns in building their web apps 
    
    angularJS had difficulty dealing with the complexities of very large projects
        facebook developed react as a solution 
        angularJS also rewrote their whole library, and renamed it angular. but alot of people still moved to react at this time 

    react did 4 main things to deal with large project complexity: 
        1) react manages the DOM, the developer does not directly manipulate it via javascript 
            before react you'd often use the DOM API, or some library like jQuery
            note that this was an imperative approach to interacting with the DOM
                in contrast React provides a declarative API for updating the DOM
                and it sounds like this declarative API is driven by state in a way that's functional-reactive
            DOM manipulation is an expensive operation. the browser must change or add the elements, then relayout the whole page
        2) react also uses components for building the UI 
            and you can have subcomponents within larger components, etc. 
            this made the UI alot more reusable 
            these react components are implemented using javascript functions
                these functions receive view attributes (which it calls props) and return JSX
        3) react uses a unidirectional data flow 
            so the State drives changes. it feeds feeds into the JSX functional components 
            react manages its virtual DOM (a javaascript version of the DOM)
                and based off that it will maintain / update the real DOM as the state changes
            in turn a user-input event mutates the State and this will trigger new updates 
        4) react was only a UI framework, unlike angularJS which was an entire MVC framework (too heavy handed)

he recommends installing the react developer tools from the chrome web store 
    in the developer tools you'll now be able to see your react UI components


===========================================
REACT BASICS 
===========================================

people often develop react using nodeJS due to the tools nodeJS offers. 
    nodeJS provides easy access (via its package manager) to these popular tools.
    nodeJS also has good module dependency managers (these can be CommonJS modules or the newer ES6 modules) 

npm installs packages locally by default. to run the locally installed package you have to specify the full path: 

    npm install package_name
    ./node_modules/.bin/package_name            // execute the package 

    
if you add the package name to "scripts" in package.json you can execute the package via npm run: 

    // packages.json
    {
        ...
        "scripts": {
            "package_name": "package_name"
        }
    }

    // command line 
    npm run package_name                        // execute the package 


npx is a newer nodeJS command that executes a package immediately. 
    it first checks whether the command exists in the $PATH, then it checks local binaries, then it attempts to download the package. 
    after one of these steps succeeds it will execute the package
    note that it will not install the package it downloads, it will just immediately execute it. 
    
    many packages for project setup (like create-react-app) are generators, not saved binaries. 
        so to setup a project they don't need to be installed, just executed. 
            this can be nice since it ensures you always execute the most updated package


the following command generates the boilerplate of a react project in the target directory: 

        npx create-react-app directory_name 


for large projects usually people use a react framework, since react by itself is just a UI framework. 
    here are some react-based frameworks that can be used with react, and commands to setup a project using them: 

    next.js         npx create-next-app@latest
                    full-stack react development framework (so sounds like it goes beyond just the UI stuff react does)

    remix           npx create-remix
                    full-stack react development framework with nested routing (sounds like its network layer is also divided into components)
                    
    gatspy          npx create-gatsby 
                    react framework for fast CMS-backed websites. it has a rich plugin ecosystem and graphQL layer 

    expo            npx create-expo-app 
                    react framework for creating cross-platform Android, iOS, and web apps


you'll need to install ESLint with the right configs for React.
    you should also install Prettier for code formatting. 
    read for more details: https://react.dev/learn/editor-setup

you can also install typescript. this may require some specific config based on the react framework you use
    read for more details: https://react.dev/learn/typescript








