=============================================================
CHAPTER 1 - The Python Data Model
=============================================================

the python interpreter typically calls the special methods __*__ 
    by implementing them you allow your objects to leverage alot of built-in language features

usually you want to avoid calling special methods directly, and call a relevant public function instead 
    i.e. use len(obj) instead of obj.__len__()
    the relevant public functions are often better optimized and provide additional services


__repr__ is used by debuggers / !r in fstrings / %r in classic formatting strings.
    it should return a string that, if possible, can be used to recreate the object 
__str__ is used by print() and should return a human readable string

calls to __str__, if not implemented, fallback to use __repr__ 
    so if the output of __repr__ is readable enough you don't have to implement __str__ 

python accepts any object in a boolean context, and calls the method bool(obj) to determine if it's truthy or falsy
    user-defined classes are treated as truthy by default unless __bool__ or __len__ are implemented 
    python will first try to invoke __bool__, and if that doesn't work it'll try __len__ 
    if __len__ returns 0 it'll be a false value


    class Vector:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y 

        def __bool__(self):
            return bool(self.x or self.y)                   # explicit conversion to bool because the __bool__ implementation must return a boolean 
                                                            # the 'or' comparison actually returns x if it evaluates true, otherwise y
            

there are 3 methods that containers should implement: 

    method              ABS class that defines it
    __iter__            Iterable                            # support the 'for' loop, unpacking, and other iteration 
    __len__             Sized                               # support len built-in functions 
    __contains__        Container                           # support the 'in' operator  

the Collection ABS unifies / inherits from all 3 of these essential interfaces
    so conform to Collection and you'll be forced to implement all 3 


three important subclasses of Collection are:

    Sequence                    # implemented by list and str 
    Mapping                     # implemented by dict, collections.defaultdict
    Set                         # implemented by set and frozenset

these 3 subclasses normalize the interfaces of pythons collection types 

Sequence also implements the Reversible interface / the __reversed__ method 
    this allows you to iterate sequences in both directions 


here's an overview of python's special methods - they'll be described in more detail throughout the rest of the book:

    category                                method names 

    string/byte representation                                          __repr__, __str__, __format__, __bytes__, __fspath__
    conversion to number                                                __bool__, __complex__, __int__, __float__, __hash__, __index__ 
    emulating collections                                               __len__, __getitem__, __setitem__, __delitem__, __contains__
    iteration                                                           __iter__, __aiter__, __next__, __anext__, __reversed__ 
    callable or coroutine execution                                     __call__, __await__ 
    context management                                                  __enter__, __exit__, __aexit__, __aenter__
    instance creation / destruction                                     __new__, __init__, __del__ 
    attribute management                                                __getattr__, __getattribute__, __setattr__, __delattr__, __dir__ 
    attribute descriptors                                               __get__, __set__, __delete__, __set_name__
    abstract base classes                                               __instancecheck__, __subclasscheck__
    class metaprogramming                                               __prepare__, __init_subclass__, __class_getitem__, __mro_entries__ 

here's an overview of math-related special methods:

    unary numeric (-, +, abs)                                           __neg__, __pos__, __abs__ 
    comparison (<, <=, ==, !=, >, >=)                                   __lt__, __le__, __eq__, __ne__, __gt__, __ge__ 

    arithmetic (+, -, *, /, //, %, @, divmod(), round(), **, pow())     __add__, __sub__, __mul__, __truediv__, __floordiv__, __mod_, __matmul__,
                                                                            __divmod__, __round__, __pow__ 
    reversed arithmetic (operators with swapped operands)               __radd__, __rsub__, __rmul__, __rtruediv__, __rfloordiv__, __rmod__, 
                                                                            __rmatmul__, __rdivmod__, __rpow__
    augmented assignment (+=, -=, *=, /=, //=, %=, @=, **=)             __iadd__, __isub__, __imul__, __itruediv__, __ifloordiv__, __imod__, 
                                                                            __imatmul__, __ipow__
    bitwise (&, |, ^, <<, >>, ~)                                        __and__, __or__, __xor__, __lshift__, __rshift__, __invert__ 
    reversed bitwise (operators with swapped operands)                  __rand__, __ror__, __rxor__, __rlshift__, __rrshift__
    augmented bitwise assignment (&=, |=, ^=, <<=, >>=)                 __iand__, __ior__, __ixor__, __ilshift__, __irshift__


python calls a reversed operator special method on the second operand when the corresponding method on the first operand can't be used (see CH16)

len() and abs() are called as functions instead of methods as an optimization. 
    the data is read directly from a field in the C struct - if it were invoked as a method there'd be an additional layer of abstraction

    arr = [1, 2, 3, 4, 5]
    print(len(arr))

but the special __len__ and __abs__ methods still let you customize these calls on your custom types 

=============================================================
CHAPTER 2 - An Array of Sequences 
=============================================================

there are two types of sequences:
    1) containers, which can contain more than 1 type of element - i.e. list, tuple, collections.dequeue
        these hold references to the objects they contain. 
    2) primitive sequences, which can contain only 1 type - i.e. str, bytes, array.array 
        these are implemented as C arrays 

notice that tuples are an array of references. array.array will perform better. 

every python object has associated metadata, and a header in memory to contain this data 
    so the primitive seqeunces will use less memory, since they don't consist of references to objects that have headers 


some sequences are mutable while others are immutable:

    from collections import abc 

    issubclass(tuple, abc.Sequence)             # true - tuple is a virtual subclass of Sequence
    issubclass(list, abc.MutableSequence)       # true - list is a virtual subclass of MutableSequence 


list comprehensions build & return a new list:

    unicodeNumbers = [ord(symbol) for symbol in "$^&@#"]                # ord() returns the unicode number of a character


line breaks and trailing commas are ignored inside of [], {}, and () in python
    this allows you to build multi-line lists, list comprehensions, dictionaries, generator expressions, etc. without using \

there are also set comprehensions for sets, and dict comprehensions for dicts 


normally these comprehensions have their own local scope. 
    but variables initialized using the walrus operator := will still exist in the scope of the enclosing function 

    [unicodeNumbers := ord(symbol) for symbol in "$^&@#"]
    print(unicodeNumbers)


python's comprehensions are cleaner than its lambda, map, filter, etc.:

    symbols = "εaκ⍯⍱x2"
    non_ascii = [ord(s) for s in symbols if ord(s) > 127]                   # these two are equivalent, but the comprehension is much cleaner
    non_ascii = list(filter(lambda c: c > 127, map(ord, symbols)))


using comprehensions you can create tuples for the cartesion product of 2 lists:

    colors = ["black", "white"]
    sizes = ["S", "M"]
    shits = [(color, size) for color in colors for size in sizes]       # [('black', 'S'), ('black', 'M'), ('white', 'S'), ('white', 'M')]


generator expressions use the same syntax as list comprehensions except they use () instead of [].
    you can easily convert generator expressions to other data types: 

    import array 
    generatorExpression = (ord(s) for s in symbols if ord(s) > 127)
    array.array("I", generatorExpression)                                   # "I" indicates this should be an integer array 


unlike comprehensions, generator expressions are streams and don't take up large amounts of memory

_ can be used as a dummy variable 
in a match/case statement _ is a wildcard used to match any value

in python you can sometimes avoid having to write a dataclass for a simple data structure by using a tuple: 

    traveler_ids = [("USA", "312X4233"), ("BRA", "CE342569"), ("ESP", "XDA205856")]

    for passport in sorted(traveler_ids):
        print("%s/%s" % passport)                               # the % formatting operator works with tuple destructuring

    for country, _ in traveler_ids:
        print(country)




pg 32, tuples as immutable lists






=============================================================
CHAPTER 3 - x 
=============================================================

=============================================================
CHAPTER 4 - x 
=============================================================

=============================================================
CHAPTER 5 - x 
=============================================================

=============================================================
CHAPTER 6 - x 
=============================================================

=============================================================
CHAPTER 7 - x 
=============================================================

=============================================================
CHAPTER 8 - x 
=============================================================

=============================================================
CHAPTER 9 - x 
=============================================================

=============================================================
CHAPTER 10 - x 
=============================================================

=============================================================
CHAPTER 11 - x 
=============================================================

=============================================================
CHAPTER 12 - x 
=============================================================

=============================================================
CHAPTER 13 - x 
=============================================================

=============================================================
CHAPTER 14 - x 
=============================================================

=============================================================
CHAPTER 15 - x 
=============================================================

=============================================================
CHAPTER 16 - x 
=============================================================

=============================================================
CHAPTER 17 - x 
=============================================================

=============================================================
CHAPTER 18 - x 
=============================================================

=============================================================
CHAPTER 19 - x 
=============================================================

=============================================================
CHAPTER 20 - x 
=============================================================

=============================================================
CHAPTER 21 - x 
=============================================================

=============================================================
CHAPTER 22 - x 
=============================================================

=============================================================
CHAPTER 23 - x 
=============================================================

=============================================================
CHAPTER 24 - x 
=============================================================
