
---------------------------------------------------------
------------------FACTORY METHOD-------------------------
---------------------------------------------------------
aka virtual constructor

factory method | factory method
	"MULTIPLE FACTORIES"
		often you need to use factories in combination with one another as part of a coherent design
		serves the same purpose as an abstract factory but without the overhead

factory method | factory method | adapter 
	"VIRTUAL ADAPTER"
		if you're producing 2 separate sets of objects from factories you may need some dynamic way of mapping between them


adapter | adapter | factory method 
	"FACTORY PRODUCT COMPATIBILITY"
		create adapters between all the different types produced by the factory

mediator | factory method
	"FIELD OF OBJECTS"
		the mediator here is the thing the factory objects are instantiated into,
		and the medium through which they communicate & coordinate their behavior.


observer | factory method | facade
	"ASYNCHRONOUS CONSTRUCTOR"
		factories can provide a simple, observable interface, and handle the asynchronous operation for constructing an object internally.
		i.e. if constructing an object requires fetching data from a database

---------------------------------------------------------
-----------------ABSTRACT FACTORY------------------------
---------------------------------------------------------
prototype | abstract factory 
	""

strategy | command | abstract factory 
	"SETS OF BUTTONS CHANGING BASED ON CONTEXT OR EVENTS"
	so you have buttons, and a factory that produces them.
	but the buttons on screen, and what they do, may change based on context.

*abstract factory | observer | observer
	"DEPENDENCY MANAGER"
		imagine a factory that produces observers.
		an abstract factory would allow you to change the set of observers you produce.
		really this sounds alot like mocking / dependency injection
		where you can turn on either a set of mock dependencies, or the real dependencies

---------------------------------------------------------
---------------------BUILDER-----------------------------
---------------------------------------------------------
aka streaming constructor

composite | builder
	"TREE DECORATOR"
		a parser is a common utility that's implemented this way. it reads in some language, parses it, and outputs an algebraic tree

builder | state
	""



state | builder | composite 
	"" 
		

builder | adapter 
	""

visitor | observer | builder 
	"" 

builder | chain of responsibility | facade 
	"" 

---------------------------------------------------------
---------------------PROTOTYPE---------------------------
---------------------------------------------------------

chain of responsibility | prototype 
	"" 

prototype | mediator 
	""

prototype | composite 
	""

prototype | observer 
	"" 

bridge | template method | prototype 
	""

command | prototype | facade 
	""

---------------------------------------------------------
---------------------SINGLETON---------------------------
---------------------------------------------------------

singleton | singleton 
	"TENDENCY TO USE MULTIPLE SINGLETONES"
		One singleton often introduces the need for more singletons because of how it alters the programs structure. The use of global state propagates.
		so you should be careful in introducing singletones. Find ways of minimizing the need to use multiple. 

observer | singleton | observer 
	"NOTIFICATION CENTER"
		you can subscribe to a variety of events from anywhere with this pattern

adapter | singleton | facade 
	"ADAPTER FOR A GLOBAL API"
		a simple, global API for interacting with a complex subsystem.
		many different systems to access it, but they'll need adapters to interact with the API.

observer | memento | singleton 
	"ASYNC STORAGE API"
		access some global storage mechanism.
		a storage operation may take some time, especially if there's alot of data,
		so callers can listen for when the storage operation completes.

singleton | iterator | singleton 
	"DATA AGGREGATOR"?
		could this be something like our aggregator, that first checks the local and then the remote, and then some other datasources? 

template method | adapter | singleton
	"GENERIC SINGLETON METHOD"
		since singletons can be accessed from anywhere their public methods may need to be more generic.
		the method signatures for a singleton can be a generic or template method.
		the return types may be concrete, and call sites may need their own adapters for receiving them.

---------------------------------------------------------
-----------------------STATE-----------------------------
---------------------------------------------------------

state | iterator
	"ADVANCED SEARCH"
		the iterators search behavior is configurable (i.e. it has its own state)

state | command
	"CONTEXT-SENSITIVE BUTTON"
		so like the world of warcraft buttons - you click them... then the icon changes & they do something else for a few seconds. 
		They have a state associated with them

state | composite
	""

state | iterator | memento 
	"INTELLIGENT SEARCH"
		like advanced search, but it adapts to past search patterns to give better results

state | command | facade 
	"SMART BUTTON"
		from outside to inside: state > facade > command.
		like context-sensitive buttons, but the underlying system is more complex, and takes into account more context for more sophisticated behavior

state | interpreter
	"DATA ANALYZER"
		so if you have a ton of data you can analyze it and look for trends in it

state | mediator 
	"DISTRIBUTED STATE MANAGEMENT"
		any class whose responsibility is to keep state distributed consistent is serving this purpose.
		fortunately with functional reactive it's alot easier to manage this nowdays

---------------------------------------------------------
-----------------------BRIDGE----------------------------
---------------------------------------------------------

bridge | chain of responsibility 
	""

bridge | strategy | proxy
	""

bridge | template method | interpreter 
	""

---------------------------------------------------------
-----------------------FACADE----------------------------
---------------------------------------------------------

Facade | Decorator
	""
 
Facade | Decorator | Observer
	""

Facade | Mediator | Composite  
	""

---------------------------------------------------------
----------------------MEDIATOR---------------------------
---------------------------------------------------------

mediator | composite | iterator 
	""

mediator | prototype
	""

---------------------------------------------------------
----------------------DECORATOR--------------------------
---------------------------------------------------------

decorator | command
	""

decorator | composite | adapter
	""

decorator | adapter | decorator 
	""

---------------------------------------------------------
----------------------OBSERVER---------------------------
---------------------------------------------------------

observer | iterator
	""

command | observer
	""

---------------------------------------------------------
----------------------PROXY------------------------------
---------------------------------------------------------

proxy  | command
	""

memento  | proxy  | memento 
	""

---------------------------------------------------------
---------------------INTERPRETER-------------------------
---------------------------------------------------------

command  | interpreter
	""

interpreter  | strategy
	""

interpreter  | visitor  | interpreter
	""

---------------------------------------------------------
---------------------VISITOR-------------------------
---------------------------------------------------------

template method  | iterator  | visitor
	""

---------------------------------------------------------
REMAINING: 
+ 5 more pairs 
+ 25 more triplets 


prototype  | proxy  | observer  | chain of responsibility  | 
state  | iterator  | facade  | memento  | 
state  | decorator  | mediator  | visitor  | 
composite  | template method  | chain of responsibility  | template method  |
command  | chain of responsibility  | facade  | composite 
chain of responsibility  | interpreter  | chain of responsibility  | strategy  |
prototype  | state  | decorator  | strategy  | 	
iterator  | interpreter  | adapter  | abstract factory  |
iterator  | builder  | facade  | facade  | 
builder  | factory method  | decorator  | state  | 

		
command  | interpreter  | decorator  | chain of responsibility  | command 


visitor  | adapter  | decorator  | factory method  | flyweight
state  | visitor  | memento  | adapter  | strategy
abstract factory  | flyweight  | bridge  | facade  | mediator
bridge  | decorator  | abstract factory  | singleton  | flyweight

75+ patterns: 38%+?
single patterns: 21%
random patterns: remainder 
amended by: any other patterns read about. 

---------------------------------------------------------
---------------------DELEGATION--------------------------
---------------------------------------------------------
Delegation | Abstract Factory 
	""

Delegation | Template Method 
	""

Delegation | Interpreter | Template Method 
	""

Delegation | Command | Memento 
	""

Delegation | Strategy | Mediator 
	""

Delegation | Adapter | Strategy 
	""

Delegation | Interpreter | Iterator 
	""